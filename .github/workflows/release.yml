name: Release builds

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 0.1.2)'
        required: true
      upload_to_itch:
        description: 'Upload exported files to itch.io?'
        required: false
        default: 'true'
        type: boolean
      auto_generate_changelog:
        description: 'Auto-generate changelog from commits'
        required: false
        default: false
        type: boolean
      mark_prerelease:
        description: 'Mark as prerelease'
        required: true
        default: 'false'
        type: boolean
      publish_to_choco:
        description: 'Publish to Chocolatey'
        required: false
        default: 'false'
        type: boolean
      publish_to_winget:
        description: 'Publish to WinGet'
        required: false
        default: 'false'
        type: boolean
      publish_to_scoop:
        description: 'Manual Publish to Scoop'
        required: false
        default: 'false'
        type: boolean
      publish_to_aur:
        description: 'Publish to AUR'
        required: false
        default: 'false'
        type: boolean
      publish_to_snap:
        description: 'Publish to Snapcraft'
        required: false
        default: 'false'
        type: boolean

jobs:
  commit-vercode-changes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version_code: ${{ steps.prev_version.outputs.new_code }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Previous Version Code
        id: prev_version
        run: |
          PREV_CODE=$(grep -o 'version/code=[0-9]*' export_presets.cfg | head -1 | cut -d= -f2)
          NEW_CODE=$((PREV_CODE + 10))
          echo "prev_code=${PREV_CODE}" >> $GITHUB_OUTPUT
          echo "new_code=${NEW_CODE}" >> $GITHUB_OUTPUT

      - name: Generate Release Notes
        uses: mlm-games/release-notes-generator@main
        if: ${{ inputs.auto_generate_changelog == true }}
        with:
          version: ${{ inputs.version_name }}
          changelog-path: 'CHANGELOG.md'
          version-file-path: './fastlane/metadata/android/en-US/changelogs/${{ steps.prev_version.outputs.new_code }}.txt'
          version-code: '${{ steps.prev_version.outputs.new_code }}'
          exclude-patterns: 'Update ,Merge ,Auto-generate changelog'
          auto-commit: 'true'
          commit-message: 'Update release notes for v{{version}}'
          metainfo-path: './flathub/io.github.mlm_games.imagot.metainfo.xml'  # TODO: Change here when copying
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit Previous Version Code
        run: |
          echo "Previous version code: ${{ steps.prev_version.outputs.prev_code }}"
          echo "New version code: ${{ steps.prev_version.outputs.new_code }}"

          VERSION_CODE=${{ steps.prev_version.outputs.new_code }}

          sed -i "/version\/name=\".*\"/s//version\/name=\"${{ inputs.version_name }}\"/" export_presets.cfg

          # Update version codes
          sed -i "0,/version\/code=[0-9]*/s//version\/code=$VERSION_CODE/" export_presets.cfg
          sed -i "0,/version\/code=[0-9]*/! {0,/version\/code=[0-9]*/s//version\/code=$((VERSION_CODE+1))/}" export_presets.cfg
          sed -i "$(grep -n 'version/code=' export_presets.cfg | tail -n1 | cut -d: -f1),\$s/version\/code=[0-9]*/version\/code=$((VERSION_CODE+2))/" export_presets.cfg

      - name: Commit Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions"
          git pull
          git add export_presets.cfg
          git add ./fastlane/metadata/android/en-US/changelogs/${{ steps.prev_version.outputs.new_code }}.txt
          git commit -m "Update version to ${{ inputs.version_name }} (${{ steps.prev_version.outputs.new_code }})"
          git push


  prepare-and-build:
    needs: commit-vercode-changes
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        platform: ["Windows Desktop", "Linux", "Linux arm64", "Web", "Android arm32", "Android arm64", "Android x86 and x86 64", "macOS"]
      fail-fast: false
      max-parallel: 1

    steps:
      - uses: actions/checkout@v4

      - name: git pull
        shell: bash
        run: |
          git pull

      - name: Build
        uses: mlm-games/godot-build-action@main
        with:
          EXPORT_PRESET_NAME: ${{ matrix.platform }}
          ITCH_USER_SLASH_GAME: "ragebreaker/imagot" #TODO: Edit when copying
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
          RELEASE_KEYSTORE: ${{ secrets.RELEASE_KEYSTORE }}
          KEYSTORE_PASSPHRASE: ${{ secrets.KEYSTORE_PASSPHRASE }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          BUTLER_UPLOAD: ${{ inputs.upload_to_itch }}
        continue-on-error: true

      - name: Set artifact name and pull latest
        id: artifact-name
        shell: bash
        run: |
          PLATFORM="${{ matrix.platform }}"
          SAFE_NAME="${PLATFORM//[^a-zA-Z0-9_]/_}"
          echo "name=${SAFE_NAME}" >> $GITHUB_OUTPUT
          git pull

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-name.outputs.name }}-build
          path: ${{ github.workspace }}/builds/

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ github.workspace }}/builds/*
          name: ${{ inputs.version_name }}
          tag_name: ${{ inputs.version_name }}
          body_path: ./fastlane/metadata/android/en-US/changelogs/${{ needs.commit-vercode-changes.outputs.new_version_code }}.txt
          prerelease: ${{ inputs.mark_prerelease }}
          generate_release_notes: true
        continue-on-error: true

      - name: Generate SHA256 checksums
        shell: bash
        run: |
          cd "${{ github.workspace }}/builds/"
          echo "# SHA256 Checksums for ${{ matrix.platform }}" > SHA256SUMS.txt
          echo "Generated on $(date -u)" >> SHA256SUMS.txt
          echo "" >> SHA256SUMS.txt
          shopt -s globstar nullglob
          for file in **/*; do
            if [ -f "$file" ] && [ "$(basename "$file")" != "SHA256SUMS.txt" ]; then
              HASH=$(sha256sum "$file" | cut -d ' ' -f 1)
              echo "$HASH  $file" >> SHA256SUMS.txt
              echo "File: $file"
              echo "SHA256: $HASH"
            fi
          done
        continue-on-error: true


  trigger-choco:
    needs: [prepare-and-build]
    if: ${{ inputs.publish_to_choco == true }}
    permissions:
      actions: write
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch choco-upload.yml
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'choco-upload.yml',
              ref: 'main',
              inputs: {
                version_name: '${{ inputs.version_name }}'
              }
            });
            core.info('Triggered Chocolatey publish for ${{ inputs.version_name }}');

  trigger-winget:
    needs: [prepare-and-build]
    if: ${{ inputs.publish_to_winget == true }}
    permissions:
      actions: write
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch winget-upload.yml
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'winget-upload.yml',
              ref: 'main',
              inputs: {
                version_name: '${{ inputs.version_name }}'
              }
            });
            core.info('Triggered WinGet publish for ${{ inputs.version_name }}');

  trigger-scoop:
    needs: [prepare-and-build]
    if: ${{ inputs.publish_to_scoop == true }}
    permissions:
      actions: write
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch scoop-upload.yml
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'scoop-upload.yml',
              ref: 'main',
              inputs: {
                version_name: '${{ inputs.version_name }}'
              }
            });
            core.info('Triggered Scoop update for ${{ inputs.version_name }}');

  trigger-snap:
    needs: [prepare-and-build]
    if: ${{ inputs.publish_to_snap == true }}
    permissions:
      actions: write
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch snap-upload.yml
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'snap-upload.yml',
              ref: 'main',
              inputs: {
                version_name: '${{ inputs.version_name }}'
              }
            });
            core.info('Triggered Snapcraft publish for ${{ inputs.version_name }}');


  update-aur:
    needs: [prepare-and-build]
    runs-on: ubuntu-latest
    if: ${{ inputs.publish_to_aur == true }}
    steps:
      - name: Trigger AUR publish workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'aur-upload.yml',
              ref: 'main',
              inputs: {
                version_name: '${{ inputs.version_name }}',
                increment_pkgrel: 'false'
              }
            });

            console.log('Triggered AUR publish workflow for version ${{ inputs.version_name }}');
            
